%% Ros clearing
clear all;
clc;
close all;
rosshutdown;

%% camera calibration
cameraParams = webcamSequence("Logitech BRIO");
pause();

%% regular params
cam = webcam(); % specify used webcam
boardSize = [5, 8];
squareSize = 10; % millimetres
nPictures = 3;
nPoints = (boardSize(1) - 1) * (boardSize(2) - 1);
imagePoints = zeros(nPoints,2,nPictures);
T_B2E = zeros(4,4,3);
T_C2P = zeros(4,4,3);
A = zeros(4,4,2);
B = zeros(4,4,2);

% preview(cam);

dobotSim = DobotMagician();



%% Ros starting
rosinit('192.168.27.1');

%% get the dobot in
dobot = DobotROS();


%% Shenanigans
for i = 1:nPictures
    joint_target = [-0.2 * i,0.4,0.3,0.0];
    q = zeros(1,5);
    q(1) = joint_target(1);
    q(2) = joint_target(2);
    q(3) = joint_target(3);
    q(4) = pi - q(3) - q(2);
    q(5) = joint_target(4);
    T_B2E(:,:,i) = dobotSim.model.fkine(q);
    dobot.PublishTargetJoint(joint_target);
    % move end effector to desired location
    pause(3);
    img = snapshot(cam);
    detectedPoints = detectCheckerboardPoints(img);
    % disp(size(detectedPoints));
    imagePoints(:,:,i) = detectedPoints(1:nPoints,:);
end

%% Post shenaningans

worldPoints = generateCheckerboardPoints(boardSize, squareSize);
imageSize = [size(img, 1), size(img, 2)];
% cameraParams = load('cameraParams.mat');

%% post post

for i = 1:nPictures
    disp(imagePoints(:,:,i));
    [rotationMatrix, translationVector] = extrinsics(imagePoints(:,:,i), worldPoints, cameraParams);
    T = [rotationMatrix, translationVector' * 0.001; zeros(1,3), 1];
    T_C2P(4,4,:) T);
end

X = AXXB_Solver(A, B)

%% fin
clear('cam');