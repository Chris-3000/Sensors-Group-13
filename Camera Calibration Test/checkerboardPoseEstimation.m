numImages = 3;
prefix = "oddboard";
extension = '.jpg';

filenames = strings(1, numImages);
for i = 1:numImages
    filenames(i) = sprintf('%s%d%s', prefix, i, extension);
end

[imagePoints, boardSize] = detectCheckerboardPoints(filenames);
disp(size(imagePoints));

squareSize = 35; % millimetres
worldPoints = generateCheckerboardPoints(boardSize, squareSize);
disp(boardSize)

index = 3;
I = imread(filenames(index));
imageSize = [size(I, 1), size(I, 2)];

cameraParams = estimateCameraParameters(imagePoints, worldPoints, ...
                                        'WorldUnits', 'millimetres', ...
                                        'ImageSize',imageSize);
[rotationMatrix, translationVector] = extrinsics(imagePoints(:,:,index), worldPoints, cameraParams);

disp('Rotation matrix:');
disp(rotationMatrix);
disp('Translation vector:');
disp(translationVector);

% Display x, y and z axes on checkerboard
axesPoints = [0, 0, 0; squareSize, 0, 0; 0, squareSize, 0; 0, 0, squareSize];
projectedPoints = worldToImage(cameraParams, rotationMatrix, translationVector, axesPoints);

imshow(I);
hold on;
axis on;
origin = projectedPoints(1,:);
xAxis = projectedPoints(2,:) - origin;
yAxis = projectedPoints(3,:) - origin;
zAxis = projectedPoints(4,:) - origin;
quiver(origin(1), ...
    origin(2), ...
    xAxis(1), ...
    xAxis(2), ...
    'LineWidth',2, ...
    'Color','red', ...
    'MaxHeadSize',10);
quiver(origin(1), ...
    origin(2), ...
    yAxis(1), ...
    yAxis(2), ...
    'LineWidth',2, ...
    'Color','green', ...
    'MaxHeadSize',10);
quiver(origin(1), ...
    origin(2), ...
    zAxis(1), ...
    zAxis(2), ...
    'LineWidth',2, ...
    'Color','blue', ...
    'MaxHeadSize',10);

